global without sharing class ReportPerformance {
    
    global Report report {get;set;}
    global String reportId {get;set;}
    global String filter {get;set;}
    global String lcBaseURL {get;set;}
    global String distribReportId {get;set;}
    global final static String NDG_PER_MDS_PTF = 'PERF_NDG_per_modello_di_servizio_e_portafogli';
    global final static String NUCLEI_PER_MDS_PTF = 'PERF_Nuclei_per_modello_di_servizio_e_ptf';
    global final static String NDG_REPORT_TYPE = 'Report Performance NDG';
    global final static String DISTRIBUZIONE_NDG_REPORT_TYPE = 'Distribuzione NDG per Ruolo e MDS';


    public ReportPerformance () {
        String reportName = ApexPages.currentPage().getParameters().get('reportName');
        //String distribReportName = ApexPages.currentPage().getParameters().get('');
        String IdCEDFiliale = ApexPages.currentPage().getParameters().get('IdCEDFiliale');
        String IdCEDArea = ApexPages.currentPage().getParameters().get('IdCEDArea');
        String IdCEDDR = ApexPages.currentPage().getParameters().get('IdCEDDR');
        String IdCEDBanca = ApexPages.currentPage().getParameters().get('IdCEDBanca');
        String NDGPortafogliato = ApexPages.currentPage().getParameters().get('NDGPortafogliato');
        String ModelloDiServizio = ApexPages.currentPage().getParameters().get('ModelloDiServizio');
        String IdCEDCapofila = ApexPages.currentPage().getParameters().get('IdCEDCapofila');
        String IsActive = ApexPages.currentPage().getParameters().get('IsActive');
        
        String MDS = ApexPages.currentPage().getParameters().get('MDS');
		this.report = [
            SELECT Id, Name, DeveloperName
            FROM Report
            WHERE DeveloperName =: reportName
        ][0];
        this.reportId = report.Id;
        User currentUser = getIsGruppo();

        filter = '[';
        if (checkIsGruppo(currentUser) && reportName!='Distribuzione_NDG_per_Ruolo_e_MMDS_v1_5XP') {
            System.debug('SONO DENTRO');
            filter += '{column: \'' + NDGPortafogliato + '\', operator: \'equals\', value: \''+true+'\'}';
        } else if (currentUser.PTF_IsUffPrivate__c) {
            String[] drVisibili = currentUser.PTF_DirezioniRegionaliVisibili__c.split(', ');
            List<Account> allDR = [SELECT Id, Name, PTF_IdCED__c FROM Account WHERE RecordType.DeveloperName =: 'DirezioneRegionale'];
            List<String> allDRIdCED = new List<String>();
            for (Account acc : allDR) allDRIdCED.add(acc.PTF_IdCED__c);
            List<String> deltaIdCED = new List<String>();
            for (String drIdCED : allDRIdCED) {
                if (!drVisibili.contains(drIdCED)) deltaIdCED.add(drIdCED);
            }
            
            for (Integer i = 0; i < deltaIdCED.size(); i++) {
                filter += '{column: \'' + IdCEDDR + '\', operator: \'notEqual\', value: \' ' + deltaIdCED[i] + '\'}'; 
            }
            if (getReportType(this.reportId) == NDG_REPORT_TYPE) {
                filter += ',{column: \'' + NDGPortafogliato + '\', operator: \'equals\', value: \''+true+'\'}' +
                    addMDSFilters(report.DeveloperName, ModelloDiServizio);
            }
            

            for (String s  :deltaIdCED) System.debug('delta idced = '+s);
        } else if (currentUser.PTF_TipologiaUO__c == 'FilialeDiRelazione') {
            Account filiale = [SELECT Id, PTF_IsHub__c, PTF_BranchTypology__c FROM Account WHERE PTF_IdCED__c =: currentUser.idced__c][0];
            if (filiale.PTF_BranchTypology__c == 'F' || !filiale.PTF_IsHub__c) {
                if (getReportType(this.reportId) == NDG_REPORT_TYPE) {
                    filter += 
                        '{column: \'' + IdCEDFiliale + '\', operator: \'equals\', value: \' ' + currentUser.idced__c + '\'},'+
                        '{column: \'' + NDGPortafogliato + '\', operator: \'equals\', value: \''+true+'\'}' +
                        addMDSFilters(report.DeveloperName, ModelloDiServizio);
                } else if (getReportType(this.reportId) == DISTRIBUZIONE_NDG_REPORT_TYPE) {
                    System.debug('*****QUII');
                    filter += 
                        '{column: \'' + IdCEDFiliale + '\', operator: \'equals\', value: \' ' + currentUser.idced__c + '\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Assente\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Residuale\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'\'}';
                }
            } else {
                if (getReportType(this.reportId) == NDG_REPORT_TYPE) {
                    filter += '{column: \'' + IdCEDFiliale + '\', operator: \'equals\', value: \' ' + currentUser.idced__c + '\'}'+
                    addMDSFilters(report.DeveloperName, ModelloDiServizio);
                    System.debug('filter HERE = '+filter);
                } else if (getReportType(this.reportId) == DISTRIBUZIONE_NDG_REPORT_TYPE) {
                    filter += 
                        '{column: \'' + IdCEDFiliale + '\', operator: \'equals\', value: \' ' + currentUser.idced__c + '\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Assente\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Residuale\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'\'}';
                }
            } 
        } else if (currentUser.PTF_TipologiaUO__c == 'Area') {
            if (getReportType(this.reportId) == NDG_REPORT_TYPE) {
                filter += 
                    '{column: \'' + IdCEDArea + '\', operator: \'equals\', value: \' ' + currentUser.idced__c + '\'},'+
                    '{column: \'' + NDGPortafogliato + '\', operator: \'equals\', value: \''+true+'\'}' + 
                    addMDSFilters(report.DeveloperName, ModelloDiServizio);
            } else if (getReportType(this.reportId) == DISTRIBUZIONE_NDG_REPORT_TYPE) {
                filter += 
                    '{column: \'' + IdCEDArea + '\', operator: \'equals\', value: \' ' + currentUser.idced__c + '\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Assente\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Residuale\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'\'}';
            }
        } else if (currentUser.PTF_TipologiaUO__c == 'DirezioneRegionale') {
            if (getReportType(this.reportId) == NDG_REPORT_TYPE) {
                filter += 
                    '{column: \'' + IdCEDDR + '\', operator: \'equals\', value: \' ' + currentUser.idced__c + '\'},'+
                    '{column: \'' + NDGPortafogliato + '\', operator: \'equals\', value: \''+true+'\'}' +
                    addMDSFilters(report.DeveloperName, ModelloDiServizio);
            } else if (getReportType(this.reportId) == DISTRIBUZIONE_NDG_REPORT_TYPE) {
                filter += 
                    '{column: \'' + IdCEDDR + '\', operator: \'equals\', value: \' ' + currentUser.idced__c + '\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Assente\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Residuale\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'\'}';
            }
        } else if (currentUser.PTF_TipologiaUO__c == 'Banca') {
            if (getReportType(this.reportId) == NDG_REPORT_TYPE) {
                filter += 
                    '{column: \'' + IdCEDBanca + '\', operator: \'equals\', value: \' ' + currentUser.idced__c + '\'},'+
                    '{column: \'' + NDGPortafogliato + '\', operator: \'equals\', value: \''+true+'\'}' +
                    addMDSFilters(report.DeveloperName, ModelloDiServizio);
            } else if (getReportType(this.reportId) == DISTRIBUZIONE_NDG_REPORT_TYPE) {
                filter += 
                    '{column: \'' + IdCEDBanca + '\', operator: \'equals\', value: \' ' + currentUser.idced__c + '\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Assente\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Residuale\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'\'}';
            }
        } else if (currentUser.PTF_TipologiaUO__c == 'AltraUnitaOrganizzativa') {
            Account uo = [SELECT Id, RecordType.DeveloperName FROM Account WHERE PTF_IdCED__c =: currentUser.PTF_IdCEDPadre__c][0];
            if (uo.RecordType.DeveloperName == 'Area') {
                if (getReportType(this.reportId) == NDG_REPORT_TYPE) {
                    filter += 
                        '{column: \'' + IDCEDArea + '\', operator: \'equals\', value: \' ' + currentUser.PTF_IdCEDPadre__c + '\'},'+
                        '{column: \'' + NDGPortafogliato + '\', operator: \'equals\', value: \''+true+'\'}' +
                        addMDSFilters(report.DeveloperName, ModelloDiServizio);
                } else if (getReportType(this.reportId) == DISTRIBUZIONE_NDG_REPORT_TYPE) {
                    filter += 
                        '{column: \'' + IdCEDArea + '\', operator: \'equals\', value: \' ' + currentUser.PTF_IdCEDPadre__c + '\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Assente\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Residuale\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'\'}';
                }
            } else if (uo.RecordType.DeveloperName == 'DirezioneRegionale') {
                if (getReportType(this.reportId) == NDG_REPORT_TYPE) {
                    filter += 
                        '{column: \'' + IdCEDDR + '\', operator: \'equals\', value: \' ' + currentUser.PTF_IdCEDPadre__c + '\'},'+
                        '{column: \'' + NDGPortafogliato + '\', operator: \'equals\', value: \''+true+'\'}' + 
                        addMDSFilters(report.DeveloperName, ModelloDiServizio);
                } else if (getReportType(this.reportId) == DISTRIBUZIONE_NDG_REPORT_TYPE) {
                    filter += 
                        '{column: \'' + IdCEDDR + '\', operator: \'equals\', value: \' ' + currentUser.PTF_IdCEDPadre__c + '\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Assente\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Residuale\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'\'}';
                }
            } else if (uo.RecordType.DeveloperName == 'Banca') {
                if (getReportType(this.reportId) == NDG_REPORT_TYPE) {
                    filter += 
                        '{column: \'' + IdCEDBanca + '\', operator: \'equals\', value: \' ' + currentUser.PTF_IdCEDPadre__c + '\'},'+
                        '{column: \'' + NDGPortafogliato + '\', operator: \'equals\', value: \''+true+'\'}' +
                        addMDSFilters(report.DeveloperName, ModelloDiServizio);
                } else if (getReportType(this.reportId) == DISTRIBUZIONE_NDG_REPORT_TYPE) {
                    filter += 
                        '{column: \'' + IdCEDBanca + '\', operator: \'equals\', value: \' ' + currentUser.PTF_IdCEDPadre__c + '\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Assente\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Residuale\'}, '+
                        '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'\'}';
                }
            }
        }
        
        filter += ']';

        String hostname = URL.getSalesforceBaseUrl().getHost();

        Integer position = hostname.indexOf('--c');
        String mydomain='';
        String endUrl = '';
        if(position!=-1){
            mydomain = hostname.substring(0, position);
            endUrl = '.lightning.force.com'; 
        } else { 
            mydomain = hostname;
        }
        lcBaseURL = 'https://' + mydomain + endUrl;
        Map<String, String> headers = Apexpages.currentPage().getHeaders(); 
        headers.put('X-Frame-Options', 'ALLOW-FROM ' + lcBaseURL);
        headers.put('Content-Security-Policy', 'frame-ancestors ' + lcBaseURL);
    }

    @AuraEnabled
    global static String getReportType(Id reportId) {
        Reports.ReportDescribeResult reportDescription = Reports.ReportManager.describeReport(reportId);
        Reports.ReportMetadata reportMetadata = reportDescription.getReportMetadata();
        Reports.ReportType rt = reportMetadata.getReportType();
        return rt.getLabel();
    }

    @AuraEnabled
    global static String addMDSFilters(String reportName, String ModelloDiServizio) {
        if (reportName.contains(NUCLEI_PER_MDS_PTF)) {
            return ',{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Assente\'},'+
                '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'Residuale\'},'+
                '{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'\'}';
        } else if (reportName.contains(NDG_PER_MDS_PTF)) {
            return ',{column: \'' + ModelloDiServizio + '\', operator: \'notEqual\', value: \'\'}';
        } else return '';
    }

    @AuraEnabled
    global static Boolean checkIsGruppo(User u) {
        return u.Profile.Name == 'NEC_D.0' || u.Profile.Name == 'NEC_D.1' || u.Profile.Name == 'NEC_D.10' || (u.Profile.Name == 'NEC_D.2' && u.abi__c == '05387');
    }

    @AuraEnabled
    global static User getIsGruppo() {
        return [
            SELECT Id, Profile.Name, idced__c, PTF_IdCEDPadre__c, abi__c, PTF_TipologiaUO__c, PTF_DirezioniRegionaliVisibili__c, PTF_IsUffPrivate__c
            FROM User
            WHERE Id =: UserInfo.getUserId()
        ][0];
    }

    @AuraEnabled
    global static UserWrapper getUserWrapper() {
        UserWrapper uw = new UserWrapper();
        uw.usr = getIsGruppo();
        uw.isGruppo = checkIsGruppo(uw.usr);
        return uw;
    }
    
	@AuraEnabled
	global static String getUrl(){
		String hostname = URL.getSalesforceBaseUrl().getHost();
		System.debug('hostname = '+hostname);
		Integer position = hostname.indexOf('--c');
		String mydomain='';
		String endUrl = '';
		if(position!=-1){
			mydomain = hostname.substring(0, position);
			endUrl = '.lightning.force.com'; 
		} else { 
			mydomain = hostname;
		}
		String lcBaseURL = 'https://' + mydomain + endUrl;	    
        System.debug('lcBaseURL = '+lcBaseURL);
		return lcBaseURL;
	}

    public static void testRun() {
        Integer i = 0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        
    }

    global class UserWrapper {
        @AuraEnabled	
        global User usr {get;set;}	
        @AuraEnabled
        global Boolean isGruppo {get;set;}
    }
}