public without sharing class OnWorkOrderTriggerHandler {
    public virtual class BaseException extends Exception {}
    public static Boolean skip = false;

    public static void handleAfterInsert(List<WorkOrder> newWorkOrderList){

        List<WorkOrder> woWithIterList = new List<WorkOrder>();
        List<WorkOrder> woWithOutIterList = new List<WorkOrder>();
        for(WorkOrder workOrder : newWorkOrderList){
            
            if(workOrder.HasIter__c){
                woWithIterList.add(workOrder);
            }
        }
        if(!woWithIterList.isEmpty()){

            Map<String,  Map<String, SpostamentiBooleanWrapper>> recordApproversMap = getApprovers(woWithIterList);
            Map<String, String> ownerIdMap = new Map<String, String>();
            Map<String, String> noteMap = new Map<String, String>();
            for(WorkOrder workOrder : woWithIterList){
    
                ownerIdMap.put(workOrder.Id, workOrder.OwnerId);
                noteMap.put(workOrder.Id, workOrder.Description);
            }
            if(!recordApproversMap.isEmpty()){
                
                ApproverHandler.initApprovalProcess(recordApproversMap, ownerIdMap, noteMap);
            }
        }
    }

    public static void handleBeforeUpdate(List<WorkOrder> newWorkOrderList, Map<Id, WorkOrder> oldWorkOrderMap) {
        System.debug('pz newWorkOrderList :'+newWorkOrderList);
        System.debug('pz oldWorkOrderMap :'+oldWorkOrderMap);
        if(!skip){
            List<WorkOrder> workOrderList = new List<WorkOrder>();
            List<WorkOrder> workOrderOnRejectList = new List<WorkOrder>();
    
            for(WorkOrder workOrder : newWorkOrderList){
    
                if((workOrder.Status == 'Approvato' || workOrder.Status == 'Rifiutato') && 
                    oldWorkOrderMap.get(workOrder.Id).Status != workOrder.Status &&
                    workOrder.HasIter__c){
                        System.debug('pz handleBeforeUpdate 44');
                    workOrderList.add(workOrder);
                    System.debug('pz handleBeforeUpdate workOrderList :'+workOrderList);
                }
            }
    
            System.debug('DK workOrderIdList: ' + JSON.serialize(workOrderList));
            if(!workOrderList.isEmpty()){
                
                checkOnApproval(workOrderList, oldWorkOrderMap);
            }
        }
    }

    public static void handleAfterUpdate(List<WorkOrder> newWorkOrderList, Map<Id, WorkOrder> oldWorkOrderMap) {
        List<WorkOrder> approvedWorkOrderList = new List<WorkOrder>();
        List<WorkOrder> nextStepWorkOrderList = new List<WorkOrder>();
        Map<String, String> ownerIdMap = new Map<String, String>();
        
        for(WorkOrder workOrder : newWorkOrderList){
            
            if(workOrder.Status == 'Approvato' && 
            workOrder.Status != oldWorkOrderMap.get(workOrder.Id).Status){
                
                approvedWorkOrderList.add(workOrder);
            }else if(workOrder.Step__c != oldWorkOrderMap.get(workOrder.Id).Step__c){
                
                nextStepWorkOrderList.add(workOrder);
                ownerIdMap.put(workOrder.id, UserInfo.getUserId());
            }
        }
        
        System.debug('DK nextStepWorkOrderList: ' + JSON.serialize(nextStepWorkOrderList));
        
        
        if(!skip){
            if(!nextStepWorkOrderList.isEmpty()){
                
                setNexStepApprovers(nextStepWorkOrderList, ownerIdMap);
            }
            if(!approvedWorkOrderList.isEmpty()){
    
                approveRequests(approvedWorkOrderList);
            }
        }
    }

    public static void setNexStepApprovers(List<WorkOrder> workOrderList, Map<String, String> ownerIdMap){
        
        Map<String,  Map<String, SpostamentiBooleanWrapper>> workOrderApproversMap = getApprovers(workOrderList);

        if(!workOrderApproversMap.isEmpty()){
            
            nextApprovalStep(JSON.serialize(new Map<String, Object>{
                'workOrderApproversMap' => workOrderApproversMap,
                'ownerIdMap' => ownerIdMap
            }));
        }
    }
    
    @future
    public static void nextApprovalStep(String approvalJSON){
        
        System.debug('DK approvalJSON: ' + approvalJSON);
        Map<String,Object> approvalMap = (Map<String,Object>) JSON.deserializeUntyped(approvalJSON);
        Map<String,  Map<String, OnWorkOrderTriggerHandler.SpostamentiBooleanWrapper>> workOrderApproversMap = (Map<String,  Map<String, OnWorkOrderTriggerHandler.SpostamentiBooleanWrapper>>) JSON.deserialize(JSON.serialize(approvalMap.get('workOrderApproversMap')), Map<String, Map<String, OnWorkOrderTriggerHandler.SpostamentiBooleanWrapper>>.class);
        Map<String, String> ownerIdMap = (Map<String, String>) JSON.deserialize(JSON.serialize(approvalMap.get('ownerIdMap')), Map<String, String>.class);
        ApproverHandler.initApprovalProcess(workOrderApproversMap, ownerIdMap, new Map<String, String>());
    }

    public static void checkOnApproval(List<WorkOrder> workOrderList, Map<Id, WorkOrder> oldWorkOrderMap){
        System.debug('pz workOrderList:'+workOrderList);
        System.debug('pz oldWorkOrderMap:'+oldWorkOrderMap);
        Map<String, SObject> workOrderMap = SV_Utilities.keyBy(workOrderList, 'Id');
        System.debug('pz workOrderMap:'+workOrderMap);
        Set<String> workOrdersWithNextStepSet = checkHasNextStep(workOrderList);
        Map<String, Map<String, SpostamentiBooleanWrapper>> workOrderApproversMap = getApprovers(workOrderList);
        System.debug('workOrderApproversMap:'+workOrderApproversMap);
        Set<String> groupIdSet = new Set<String>();
        for(String workOrderId : workOrderApproversMap.keySet()){
            for(String groupId : workOrderApproversMap.get(workOrderId).keySet()){
                groupIdSet.add(groupId);
            }
        }
        Map<String, List<SObject>> fullGroupMap = SV_Utilities.groupBy([SELECT Id, UserOrGroupId, GroupId, Group.DeveloperName FROM GroupMember WHERE GroupId IN: groupIdSet], 'GroupId');
        Map<String, List<ProcessInstance>> currentStepProcessInstancesMap = new Map<String, List<ProcessInstance>>();
        Map<String, List<ProcessInstance>> processInstancesMap = ApproverHandler.getAllProcessInstancesMap(new List<String>(workOrderMap.keySet()));
        for(String workOrderId : processInstancesMap.keySet()){

            // Map<String, List<SObject>> groupMap = SV_Utilities.groupBy([SELECT Id, UserOrGroupId, GroupId FROM GroupMember WHERE GroupId IN: workOrderApproversMap.get(workOrderId).keySet()], 'GroupId');
            for(ProcessInstance processInstance : processInstancesMap.get(workOrderId)){

                
                if(processInstance.LastActorId == null){

                    if(!currentStepProcessInstancesMap.containsKey(processInstance.TargetObjectId)){

                        currentStepProcessInstancesMap.put(processInstance.TargetObjectId, new List<ProcessInstance>());
                    }
                    currentStepProcessInstancesMap.get(processInstance.TargetObjectId).add(processInstance);
                }else{

                    for(String groupId: workOrderApproversMap.get(workOrderId).keySet()){
                        List<SObject> groupMemberList = new List<SObject>();
                        for(String fullGroupId : fullGroupMap.keySet()){
                            if(workOrderApproversMap.get(workOrderId).keySet().contains(groupId)){
                                groupMemberList.addAll(fullGroupMap.get(fullGroupId));
                            }
                        }
                        Map<String, SObject> groupMemberMap = SV_Utilities.keyBy(groupMemberList, 'UserOrGroupId');
                        System.debug('DK groupMemberMap: ' + groupMemberMap);
                        System.debug('DK instance.LastActorId: ' + processInstance.LastActorId);
                        System.debug('DK has actor: ' + groupMemberMap.containsKey(processInstance.LastActorId));
                        System.debug('DK has currentUser: ' + !groupMemberMap.containsKey(UserInfo.getUserId()));
                        if(groupMemberMap.keySet().contains(processInstance.LastActorId)){
                            GroupMember gm = (GroupMember)groupMemberMap.get(processInstance.LastActorId);
                            Integer stepIndex = gm.Group.DeveloperName.split('_').size() - 2; //Modifica - Salvatore Barbieri - 28/03/2024 - 79032
                            if(gm.Group.DeveloperName.split('_')[stepIndex] == (String)workOrderMap.get(workOrderId).get('Step__c') && (!groupMemberMap.containsKey(UserInfo.getUserId()) || gm.GroupId != (String)groupMemberMap.get(UserInfo.getUserId()).get('GroupId'))){

                                if(!currentStepProcessInstancesMap.containsKey(processInstance.TargetObjectId)){
    
                                    currentStepProcessInstancesMap.put(processInstance.TargetObjectId, new List<ProcessInstance>());
                                }
                                currentStepProcessInstancesMap.get(processInstance.TargetObjectId).add(processInstance);
                            }
                        }
                    }
                }
            }
        }
        System.debug('DK workOrderApproversMap: ' + JSON.serialize(workOrderApproversMap));
        System.debug('DK currentStepProcessInstancesMap: ' + JSON.serialize(currentStepProcessInstancesMap));
        for(String workOrderId : workOrderMap.keySet()){
            
            String status = '';
            String stepKey = String.valueOf(Integer.valueOf((String)workOrderMap.get(workOrderId).get('Step__c')) + 1);
            if(currentStepProcessInstancesMap.containsKey(workOrderId)){

                for(ProcessInstance instance : currentStepProcessInstancesMap.get(workOrderId)){
                    
                    if(instance.LastActorId != null){

                        String approverId = '';
                        // Map<String, List<SObject>> groupMap = SV_Utilities.groupBy([SELECT Id, UserOrGroupId, GroupId FROM GroupMember WHERE GroupId IN: workOrderApproversMap.get(workOrderId).keySet()], 'GroupId');
                        for(String groupId: workOrderApproversMap.get(workOrderId).keySet()){
                            List<SObject> groupMemberList = new List<SObject>();
                            for(String fullGroupId : fullGroupMap.keySet()){
                                if(workOrderApproversMap.get(workOrderId).keySet().contains(groupId)){
                                    groupMemberList.addAll(fullGroupMap.get(fullGroupId));
                                }
                            }
                            Map<String, SObject> groupMemberMap = SV_Utilities.keyBy(groupMemberList, 'UserOrGroupId');
                            System.debug('DK groupMemberMap: ' + groupMemberMap);
                            System.debug('DK instance.LastActorId: ' + instance.LastActorId);
                            if(groupMemberMap.keySet().contains(instance.LastActorId)){
    
                                approverId = groupId;
                                break;
                            }
                        }
                        System.debug('DK approverId: ' + approverId);
                        if(!String.isBlank(approverId)){
                            
                            if(instance.Status != 'Removed'){
                                if((Boolean)workOrderApproversMap.get(workOrderId).get(approverId).parere){ //Modifica - Salvatore Barbieri - 27/03/2024 - 79032
                                    System.debug('pz 201');
                                    workOrderMap.get(workOrderId).put('Status', oldWorkOrderMap.get(workOrderId).Status);
                                    workOrderMap.get(workOrderId).put('OwnerId', UserInfo.getUserId());
                                    workOrderMap.get(workOrderId).put('Step__c', stepKey);
                                    continue;
                                }else if(instance.Status == 'Approved'){
                                    System.debug('pz 207');
                                    status = workOrderMap.get(workOrderId).get('Status') == 'Approvato' ? 'Approvato' : 'Pending';
                                    workOrderMap.get(workOrderId).put('Status', status);
                                    if(status == 'Pending'){
    
                                        workOrderMap.get(workOrderId).put('OwnerId', UserInfo.getUserId());
                                        workOrderMap.get(workOrderId).put('Step__c', stepKey);
                                    }else{
    
                                        workOrderMap.get(workOrderId).put('EndDate', DateTime.now());
                                    }
                                    continue;
                                }else if(instance.Status == 'Rejected'){
                                    System.debug('pz 220');
                                    status = workOrderMap.get(workOrderId).get('Status') == 'Rifiutato' ? 'Rifiutato' : 'Pending';
                                    System.debug('status 222:'+status);
                                    workOrderMap.get(workOrderId).put('Status', status);
                                    if(status == 'Pending'){
                                        System.debug('pz 227:');
                                        workOrderMap.get(workOrderId).put('OwnerId', UserInfo.getUserId());
                                        workOrderMap.get(workOrderId).put('Step__c', stepKey);
                                    }else{
                                        System.debug('pz 231:');
                                        workOrderMap.get(workOrderId).put('EndDate', DateTime.now());
                                    }
                                    continue;
                                }
                            }
                        }else{

                            workOrderMap.get(workOrderId).put('EndDate', DateTime.now());
                        }
                    }else{

                        workOrderMap.get(workOrderId).put('Status', oldWorkOrderMap.get(workOrderId).Status);
                    }
                }
            }else{
                
                System.debug('DK SINGLE APPROVER');
                String approverId = '';
                // Map<String, List<SObject>> groupMap = SV_Utilities.groupBy([SELECT Id, UserOrGroupId, GroupId FROM GroupMember WHERE GroupId IN: workOrderApproversMap.get(workOrderId).keySet()], 'GroupId');
                for(String groupId: workOrderApproversMap.get(workOrderId).keySet()){

                    List<SObject> groupMemberList = new List<SObject>();
                    for(String fullGroupId : fullGroupMap.keySet()){
                        if(workOrderApproversMap.get(workOrderId).keySet().contains(groupId)){
                            groupMemberList.addAll(fullGroupMap.get(fullGroupId));
                        }
                    }
                    Map<String, SObject> groupMemberMap = SV_Utilities.keyBy(groupMemberList, 'UserOrGroupId');
                    System.debug('DK groupMemberMap: ' + groupMemberMap);
                    System.debug('DK instance.LastActorId: ' + userInfo.getUserId());
                    if(groupMemberMap.keySet().contains(userInfo.getUserId())){

                        approverId = groupId;
                        break;
                    }
                }
                System.debug('DK approverId: ' + approverId);
                System.debug('DK workOrder.HasNextStep: ' + workOrdersWithNextStepSet.contains(workOrderId));
                System.debug('DK workOrder.Status: ' + workOrderMap.get(workOrderId).get('Status'));
                if(!String.isBlank(approverId)){
                    if(workOrderMap.get(workOrderId).get('Status') != 'Pending'){

                        if((Boolean)workOrderApproversMap.get(workOrderId).get(approverId).parere){ //Modifica - Salvatore Barbieri - 27/03/2024 - 79032
        
                            workOrderMap.get(workOrderId).put('Status', oldWorkOrderMap.get(workOrderId).Status);
                            workOrderMap.get(workOrderId).put('OwnerId', UserInfo.getUserId());
                            workOrderMap.get(workOrderId).put('Step__c', stepKey);
                            continue;
                        }else if(workOrdersWithNextStepSet.contains(workOrderId) /*&&
                            workOrderMap.get(workOrderId).get('Status') == 'Rifiutato'*/){
                                if((workOrderMap.get(workOrderId).get('Status') == 'Rifiutato' && !(Boolean)workOrderApproversMap.get(workOrderId).get(approverId).nextStepOnApproval)
                                        || (workOrderMap.get(workOrderId).get('Status') == 'Approvato' && (Boolean)workOrderApproversMap.get(workOrderId).get(approverId).nextStepOnApproval)){
                                    workOrderMap.get(workOrderId).put('Status', oldWorkOrderMap.get(workOrderId).Status);
                                    workOrderMap.get(workOrderId).put('OwnerId', UserInfo.getUserId());
                                    workOrderMap.get(workOrderId).put('Step__c', stepKey);
                                }
                        }
                    }
                }
            }
        }
    }

    public static void approveRequests(List<WorkOrder> approvedWorkOrderList){

        Map<String, SObject> approvedWorkOrderMap = SV_Utilities.keyBy(approvedWorkOrderList, 'Id');
        List<Account> accountToUpdateList = new List<Account>();
        Set<String> primarioIdSet = new Set<String>();
        Map<String, String> primarioOrigineMap = new Map<String, String>();
        Map<String, String> primarioDestinazioneMap = new Map<String, String>();
        Map<String, String> primarioFilaileDestinazioneMap = new Map<String, String>();
        for(WorkOrderLineItem workOrderLineItem : [SELECT id, AccountId__c, PTF_OrigineId__c, WorkOrderId, IsPrimario__c, PTF_Destinazione__c, PTF_Filiale_Destinazione_Id__c, IsGruppoFinanziario__c FROM WorkOrderLineItem WHERE workOrderId IN: approvedWorkOrderMap.keySet() AND Status = 'Pending']){

            if(!workOrderLineItem.IsGruppoFinanziario__c){

                accountToUpdateList.add(new Account(id = workOrderLineItem.AccountId__c,
                                                    PTF_Portafoglio__c = workOrderLineItem.PTF_Destinazione__c,
                                                    PTF_Filiale__c = workOrderLineItem.PTF_Filiale_Destinazione_Id__c));
                if(workOrderLineItem.IsPrimario__c){
                   
                    primarioIdSet.add(workOrderLineItem.AccountId__c);
                    primarioOrigineMap.put(workOrderLineItem.AccountId__c, workOrderLineItem.PTF_OrigineId__c);
                    primarioDestinazioneMap.put(workOrderLineItem.AccountId__c, workOrderLineItem.PTF_Destinazione__c);
                    primarioFilaileDestinazioneMap.put(workOrderLineItem.AccountId__c, workOrderLineItem.PTF_Filiale_Destinazione_Id__c);
                }
            }
        }

        if(!primarioIdSet.isEmpty()){

            for(CRM_AccountAccountJointOwnershipRelation__c giunzione : [SELECT id, CRM_Account__c, CRM_Active__c, CRM_PrimaryNDG__c, CRM_JointOwnership__c, CRM_JointOwnership__r.PTF_Portafoglio__c, CRM_JointOwnership__r.PTF_Portafoglio__r.PTF_Filiale__c
                                            FROM CRM_AccountAccountJointOwnershipRelation__c 
                                            WHERE CRM_Account__c IN: primarioIdSet AND
                                            CRM_JointOwnership__r.PTF_Portafoglio__c != '' AND
                                            CRM_Active__c = true AND
                                            CRM_PrimaryNDG__c = true]){
                if(primarioOrigineMap.get(giunzione.CRM_Account__c) == giunzione.CRM_JointOwnership__r.PTF_Portafoglio__c){
                
                    accountToUpdateList.add(new Account(Id = giunzione.CRM_JointOwnership__c,
                    PTF_Portafoglio__c = primarioDestinazioneMap.get(giunzione.CRM_Account__c),
                    PTF_Filiale__c = primarioFilaileDestinazioneMap.get(giunzione.CRM_Account__c)));
                }
            }
        }

        if(!accountToUpdateList.isEmpty()){

            update accountToUpdateList;
        }
    }

    public static Map<String, Map<String, SpostamentiBooleanWrapper>> getApprovers(List<WorkOrder> workOrderList){
        System.debug('workOrderList --> ' + workOrderList);
        Map<String, Map<String, SpostamentiBooleanWrapper>> workOrderApproversMap = new Map<String, Map<String, SpostamentiBooleanWrapper>>();
        Map<String, SObject> workOrderMap = SV_Utilities.keyBy(workOrderList, '%{Queues__c}%', true);
        System.debug('workOrderMap:'+workOrderMap);
        System.debug('queue:'+[SELECT id, Name, DeveloperName FROM Group WHERE DeveloperName like: workOrderMap.keySet()]);
        for(Group queue : [SELECT id, Name, DeveloperName FROM Group WHERE DeveloperName like: workOrderMap.keySet()]){

            String workOrderKey = queue.DeveloperName.split('_')[1];
            String parere = queue.DeveloperName.split('_')[2];
            String nextStepOnApproval = queue.DeveloperName.split('_').size() == 6 ? queue.DeveloperName.split('_')[3] : 'false'; //Modifica - Salvatore Barbieri - 27/03/2024 - 79032
            Integer stepIndex = queue.DeveloperName.split('_').size() - 2; //Modifica - Salvatore Barbieri - 27/03/2024 - 79032
            String step = queue.DeveloperName.split('_')[stepIndex];

            //Modifica - Salvatore Barbieri - 27/03/2024 - 79032
            //nelle info riportate dalla mappa, oltre a parere, è stata inserita anche nextStepOnApproval. Entrambe contenute in un obj wrapper
            SpostamentiBooleanWrapper spostBoolWrpTmp = new SpostamentiBooleanWrapper();
            spostBoolWrpTmp.parere = Boolean.valueOf(parere);
            spostBoolWrpTmp.nextStepOnApproval = Boolean.valueOf(nextStepOnApproval);

            if(step == workOrderMap.get('%' + workOrderKey + '%').get('Step__c')){
                System.debug('pz 348 onWorkOrderTriggerHandler');
                if(!workOrderApproversMap.containsKey((String)workOrderMap.get('%' + workOrderKey + '%').get('Id'))){
    
                    workOrderApproversMap.put((String)workOrderMap.get('%' + workOrderKey + '%').get('Id'), new Map<String, SpostamentiBooleanWrapper>());
                    System.debug('pz 352 onWorkOrderTriggerHandler');
                    System.debug('pz 352  workOrderApproversMap'+workOrderApproversMap);
                }
            
                workOrderApproversMap.get((String)workOrderMap.get('%' + workOrderKey + '%').get('Id')).put(queue.Id, spostBoolWrpTmp);
            }
        }
        System.debug('pz 359  workOrderApproversMap'+workOrderApproversMap);
        return workOrderApproversMap;
    }

    public static Set<String> checkHasNextStep(List<WorkOrder> workOrderList){
        
        Set<String> workOrderIdSet = new Set<String>();
        Map<String, WorkOrder> workOrderMap = (Map<String, WorkOrder>) JSON.deserialize(JSON.serialize(SV_Utilities.keyBy(workOrderList, '%{Queues__c}%', true)), Map<String, WorkOrder>.class);
        
        for(Group queue : [SELECT id, Name, DeveloperName FROM Group WHERE DeveloperName like: workOrderMap.keySet()]){

            String workOrderKey = queue.DeveloperName.split('_')[1];
            String parere = queue.DeveloperName.split('_')[2];
            Integer stepIndex = queue.DeveloperName.split('_').size() - 2; //Modifica - Salvatore Barbieri - 28/03/2024 - 79032
            String step = queue.DeveloperName.split('_')[stepIndex];
            String nextStep = String.valueOf(Integer.valueOf(workOrderMap.get('%' + workOrderKey + '%').Step__c) + 1);
            System.debug('DK step: ' + step);
            System.debug('DK nextStep: ' + nextStep);
            if(step == nextStep){

                workOrderIdSet.add(workOrderMap.get('%' + workOrderKey + '%').Id);
            }
        }
        return workOrderIdSet;
    }

    public static void closeWorkOrder(List<WorkOrder> newWorkOrderList, Map<Id, WorkOrder> oldWorkOrderMap){
        List<Id> closeWorkOrderIds = new List<Id>();
        Map<Id,String> idStatusMap = new Map<Id,String> ();
        for(WorkOrder wo:newWorkOrderList){
            if(wo.Status!='Pending' && oldWorkOrderMap.get(wo.Id).Status=='Pending'){
                closeWorkOrderIds.add(wo.Id);
            }
        }
        List<WorkOrderLineItem> lineItems=[SELECT Id, WorkOrderId, WorkOrder.Status FROM WorkOrderLineItem WHERE Status = 'Pending' AND WorkOrderId IN:closeWorkOrderIds];
        for(WorkOrderLineItem item:lineItems){
            
            if(item.WorkOrder.Status=='Approvato'){
                item.Status='Approvato';
                item.EndDate = Datetime.now();
                idStatusMap.put(item.Id,'Approve');
            }
            else if(item.WorkOrder.Status=='Rifiutato'){
                item.Status='Rifiutato';
                item.EndDate = Datetime.now();
                idStatusMap.put(item.Id,'Reject');
            }else{
                item.Status='Annullato';
                item.EndDate = Datetime.now();
                idStatusMap.put(item.Id,'Removed');
                // idStatusMap.put(item.WorkOrderId, 'Removed');
            } 
        }
        List<Approval.ProcessWorkitemRequest> pwirList = new List<Approval.ProcessWorkitemRequest>();
        for(ProcessInstanceWorkitem p: [SELECT Id, ProcessInstance.TargetObjectId
                                        FROM ProcessInstanceWorkitem 
                                        WHERE ProcessInstance.Status='Pending' AND ProcessInstance.TargetObjectId IN:idStatusMap.keySet()]){
            Approval.ProcessWorkitemRequest result = new Approval.ProcessWorkitemRequest();
            
            result.setAction(idStatusMap.get(p.ProcessInstance.TargetObjectId));           
            result.setWorkitemId(p.Id);
            pwirList.add(result);

        }
        OnWorkOrderLineItemTriggerHandler.skip=true;
        if(!pwirList.isEmpty()){

            Approval.process(pwirList);
        }
        update lineItems;
    }

    public static void handleBeforeDelete(List<WorkOrder> oldWorkOrderList){

        for(WorkOrder workOrder : oldWorkOrderList){

            if(workOrder.Status == 'Pending'){

                // workOrder.addError('Non è possibile eliminare un ordine di lavoro in lavorazione.');
            }
        }
    }

    //Modifica - Salvatore Barbieri - 27/03/2024 - 79032
    public class SpostamentiBooleanWrapper{
        public Boolean parere;
        public Boolean nextStepOnApproval;
    }

    public static void testRun() {
        Integer i = 0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
}